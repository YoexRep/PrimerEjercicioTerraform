## üè¢ Escenario de pr√°ctica (ejercicio simulado)

Yoel, bienvenido al equipo de **Infraestructura Cloud**.

Necesitamos que prepares un entorno b√°sico en **AWS** para un **equipo de desarrollo interno**. El objetivo es que los desarrolladores puedan probar una aplicaci√≥n web.

### üìå Requerimientos

1. **Red (VPC & Subredes)**
    - Crea una **VPC propia** (no uses la default).
    - Dentro de esa VPC, define **dos subnets p√∫blicas** en distintas **AZs**.
    - Configura una **Internet Gateway** para que las instancias tengan salida a internet.
    - Configura una **Route Table** para esas subnets.
2. **Instancias EC2 (servidores web)**
    - Debes crear **dos instancias EC2** (tipo `t2.micro`), cada una en una subnet diferente.
    - Ambas instancias deben tener instalado **nginx** autom√°ticamente (con `user_data`).
    - Config√∫ralas para aceptar tr√°fico en los puertos **22 (SSH)** y **80 (HTTP)**.
3. **Balanceador de carga (ELB cl√°sico o ALB)**
    - Coloca un **Load Balancer** al frente de las dos instancias, de manera que se reparta el tr√°fico HTTP (puerto 80).
    - El balanceador debe estar asociado a las dos subnets.
4. **Outputs**
    - El c√≥digo debe mostrar como output la **IP p√∫blica del Load Balancer**, para que podamos probar la aplicaci√≥n en el navegador.

---

### ‚úÖ Qu√© se espera de ti

- Organizar el proyecto en archivos l√≥gicos (`main.tf`, `variables.tf`, `outputs.tf`).
- Usar **variables** para al menos: regi√≥n, tipo de instancia y nombre del proyecto.
- Mantener el c√≥digo legible y reutilizable (ejemplo: podr√≠as usar m√≥dulos si quieres, pero no es obligatorio todav√≠a).

---

üëâ Con este ejercicio vas a practicar:

- Red propia (VPC, subnets, gateway, routing).
- Seguridad (SG con puertos limitados).
- EC2 con configuraci√≥n autom√°tica.
- Balanceador de carga.
- Outputs √∫tiles.